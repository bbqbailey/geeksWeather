This info assumes your SBC (Single Board Computer; e.g., Beaglebone, Raspberry, etc) has a Linux-based operating system.  It's possible this approach will work with a Windows 10 based OS, but I don't use that setup and therefore can not test it or determine whether it will work or not.

Development using ARM-based devices or other small SBCs don't provide powerful IDE environments.  However, in a lot of cases, there isn't an IDE that will run on the SBC.  In addition, most of use already have a favorite IDE installed on our main development system, such as an Ubuntu system.  However, the compilation requires the output of the compilation to be in the destination's runnable format; an application compiled on a Linux system will not run on an ARM-based device, unless a cross-compiler is utilized.  Sometimes these cross-compilers don't exist, or they may be too expensive for the home hobiest.

A developer is left with the choice of trying to do all of the development on the destination SBC, or do the development on the host (e.g., Linux), then moving the code to the SBC.

In my case, I want to do the development on my host Linux system, then move the code to my SBC for compilation.

This movement can be accomplished in various ways: ftp, ssh copy, SAMBA mounts, etc.  While SAMBA represents a nice working solution (the SBC's file system can be network mounted), I find it difficult to set up for such a small project, and requires more resources than I desire - overkill for my efforts.

I find using sftp to be a nice work way, but still requires a manual effort: I've got to save the file from the IDE, then go through the login process to use sftp to transfer files between the two systems. This can be overcome by leaving sftp started on the source system, loggin into to the destination system, then using the 'put' command to transfer the file to the destination.

While this works, I have found a solution which I like better.  It makes use of "sshfs".  

I create a directory on my host that will contain my development source files, herein referred to as 'Host-Source-Directory'.

Then on the SBC, I mount the 'Host-Source-Directory' into a directory on the SBC created for this, herein referred to as 'SBC-Source-Directory'.  In essence, this is a Linux mount point. Note that both the Host-Source-Directory and the SBC-Source-Directory are the same filesystem, but appear local from the perspective of each Host or SBC.

On my Host system, I open a terminal window, then use "ssh" to login to my SBC that I'm developing an application for.  I leave this logged-in terminal window open all of the time that I am developing for the SBC.

With this setup, I can create the code on my host using the IDE, saving to the Host-Source-Directory, then change to the SBC terminal window and do the compile from that SBC-Source-Directory.  This is quick, easy, and cheap - three things that can't normally be accomplished simultaneously!  This keeps all of my source code on my host, the IDE heavy resources on my host, and the compiles being done on the SBC.

Detailed Steps:
Note: I'm assuming you have a user account named 'geek' on the Linux Host, and on the SBC.
Note: This assumes you are going to use 'git' for version control.  Consult 'git' for installation and usage information.
Note: The following assumes you are using a Beaglebone, with the node name of 'beaglebone', and that you can get to it via 'ssh geek@beaglebone.local'.  If the 'beaglebone.local' is not known, then use the assigned IP address for the Beaglebone; e.g., 192.168.1.100  If you don't know it's IP, then log into it and perform 'ifconfig' to see the local IP address.  
Note: See bottom of this document for help with 'local'.

On your Linux host, create the directory structure:
(Note: This example uses 'geeksWeather'; if making a different app, then use that app name instead.)
	/home/geek/SoftwareProjects/geeksWeather
	
Then cd to it
	cd /home/geek/SoftwarProjects/geeksWeather
	
Install 'git' onto this structure

Put any existing software you may have already started on into your local 'git' repository.  Or, if it's already on 'git', then pull it into this directory.

Now you are ready to prepare the Beaglebone.

Log into your geek@beaglebone.local user account (or geek@xxx.xxx.x.xxx - see Notes above regarding this).

Using the 'sshfs' utility ('sudo apt-get update then sudo apt-get install sshfs' if not on your system), mount the Host-Source-Directory into the Beaglebone 'geek' account.  I developed a script utility for this, named 'sshfs_mount'.  Here are the contents:

    #!/bin/bash
    #
    #Note: This utility assumes your Linux host is named 'LINUX-HOST'. You MUST 
    #      edit this script and substitute the name of your Linux host, or the 
    #      IP address of your Linux host for this utility to work, then save 
    #      your work prior to using this utility, or it will not work!
    #Note: Should be invoked from the 'geek' account on the Beaglebone.
    #
    #In the command geek@LINUX-HOST.local, change 'LINUX-HOST' to your host
    #This assumes:
    #   - you have created user geek on both the Beagle and on your host.
    #   - you have the filestructure identified in the following commands
    #
    #Understanding the command:
    #   sshfs:                       mounts a networked file using ssh
    #   geek@LINUX-HOST.local        Host-Source-Directory source location
    #   ./SoftwareProjects/geeksWeather SBC-Source-Directory source location
    #	/home/geek/SoftwareProjects/geeksWeather-venv/geeksWeather
    #      - the directory on the Beagle where the host will be made available
    #
    #Once mounted, do a 'ls -al' to see the files from your LINUX-HOST directory!
    #
    #The command follows (note: get out of the mount point first via 'cd ~':
    cd ~
    sshfs  geek@LINUX-HOST.local:./SoftwareProjects/geeksWeather /home/geek/SoftwareProjects/geeksWeather

Verify the mount by 'cd ~/SoftwareProjects/geeksWeather' then issuing: 'ls -al'.  You should see files that are on your LINUX-HOST computer.

I add an environment variable called $working for my ~/SoftwareProjects/geeksWeather in ~/.bash_aliases.  You may need to edit and remove commented lines from .bashrc to get it to invoke.

Note: while on Beaglebone SBC, anywhere within the parent of $working, any simple changes you make, such as vi aFile.js, are actually being done in the 'sshfs' mounted repository of the Linux host, so these will be in your git repository automatically, and you won't have to copy them from the Beaglebone to your host!  So, for a small change, I don't always go back to the IDE, I just do them on the Beagle then they are available to my IDE (to refresh of course) and git.

Note: I do all of my development, git clone, add, commit, request-pull, etc while logged in as geek.  I did not see any need to install git onto my Beagle, so I do all git activities from my host.

Note: 'local' problems.  If trying to log in via 'ssh root@beaglebone.local' results in an error for you such as "ssh: Could not resolve hostname beaglebone.local: Name or service not known", then you are missing avahi-deamon, in which case:
    sudo apt-get install avahi-daemon
This took quite a while for my system.

FILE SIZE OF HOST /var/log/syslog INCREASED TO VERY LARGE!
Note: my host computer (Ubuntu 14.04) began to have a large increase in the size of the system log /var/log/syslog  In looking at this, I detected a lot of dhcp repeating enteries, about every 10 seconds or so, along with avahi-daemon and networkmanager entries.  It was associated with (for my system) eth1, which was associated with the USB connection from my host to my Beaglebone Black; I was using this as the primary power connection for the Beagle.  I elected to remove this cable and power the Beagle from a 5VDC power source, and the issue went away.  So, if you are using the USB connection and notice your /var/log/syslog file getting much larger than normal, this may be the culpret.


ech
